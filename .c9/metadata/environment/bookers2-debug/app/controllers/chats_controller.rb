{"filter":false,"title":"chats_controller.rb","tooltip":"/bookers2-debug/app/controllers/chats_controller.rb","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":0,"column":45},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1,"column":4},"end":{"row":34,"column":5},"action":"insert","lines":[" def show","    @user = User.find(params[:id])","    #ログインしているユーザーのidが入ったroom_idのみを配列で取得（該当するroom_idが複数でも全て取得）","    rooms = current_user.user_rooms.pluck(:room_id)","    #user_idが@user　且つ　room_idが上で取得したrooms配列の中にある数値のもののみ取得(1個または0個のはずです)","    user_rooms = UserRoom.find_by(user_id: @user.id, room_id: rooms)","","    if user_rooms.nil? #上記で取得できなかった場合の処理","      #新しいroomを作成して保存","      @room = Room.new","      @room.save","      #@room.idと@user.idをUserRoomのカラムに保存(１レコード)","      UserRoom.create(user_id: @user.id, room_id: @room.id)","      #@room.idとcurrent_user.idをUserRoomのカラムに保存(１レコード)","      UserRoom.create(user_id: current_user.id, room_id: @room.id)","    else","      #取得している場合は、user_roomsに紐づいているroomテーブルのレコードを@roomに代入","      @room = user_rooms.room","    end","    #if文の中で定義した@roomに紐づくchatsテーブルのレコードを代入","    @chats = @room.chats","    #@room.idを代入したChat.newを用意しておく(message送信時のform用)←筆者の表現が合っているか分かりません、、","    @chat = Chat.new(room_id: @room.id)","  end","","  def create","    @chat = current_user.chats.new(chat_params)","    @chat.save","  end","","  private","  def chat_params","    params.require(:chat).permit(:message, :room_id)","  end"],"id":3}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"remove","lines":["    "],"id":4},{"start":{"row":0,"column":45},"end":{"row":1,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":45},"end":{"row":0,"column":46},"action":"remove","lines":[" "],"id":5},{"start":{"row":0,"column":45},"end":{"row":1,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":4},"action":"remove","lines":["    "],"id":6}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":4},"action":"remove","lines":["    "],"id":7}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":1},"action":"insert","lines":[" "],"id":8},{"start":{"row":8,"column":1},"end":{"row":8,"column":2},"action":"insert","lines":[" "]},{"start":{"row":8,"column":2},"end":{"row":8,"column":3},"action":"insert","lines":[" "]},{"start":{"row":8,"column":3},"end":{"row":8,"column":4},"action":"insert","lines":[" "]}],[{"start":{"row":24,"column":1},"end":{"row":24,"column":2},"action":"remove","lines":[" "],"id":9},{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"remove","lines":[" "]},{"start":{"row":23,"column":39},"end":{"row":24,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":23,"column":39},"end":{"row":24,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"remove","lines":["    "],"id":11}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":36,"column":0},"end":{"row":36,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1620472553936,"hash":"5b7aef701ca7f082df2b9506a27f613208202cee"}